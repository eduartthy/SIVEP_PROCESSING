# -*- coding: utf-8 -*-
"""Eduarthy.SIVEP_PRE_PROCESSAMENTO_FILTROS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WxO1v4eMVv-Ev2BgOj1tWiNycB6ZqVmc

#Pré Processamento

##Preparação do ambiente
"""

import pandas as pd
from google.colab import drive
drive.mount('/content/drive', True)

"""##Leitura do Drive"""

df = pd.read_csv("/content/drive/MyDrive/SIVEP_2020_2021_covid_laboratorial.csv", sep=',',header = 0)

"""##Seleção de colunas"""

colunas = ["sem_not", "sem_pri", "cs_sexo", "nu_idade_n", "cs_gestant", "cs_raca",
           "cs_escol_n", "cs_zona","nosocomial","ave_suino", "febre","tosse",
           "garganta", "dispneia","desc_resp","saturacao","diarreia","vomito",
           "diabetes","vacina","antiviral","suport_ven","raiox_res","pos_pcrflu",
           "pos_pcrout","dor_abd","fadiga","perd_olft","perd_pala","tomo_res",
           "sg_uf", "dt_interna", "evolucao","dt_notific", "dt_evoluca",
           "dt_entuti", "dt_encerra", "dt_saiduti"]

newDf = df[colunas].copy()

"""##Conversão e remoção das linhas que não tem dados"""

dateCol = ["dt_interna", "dt_evoluca", "dt_notific", "dt_encerra", "dt_entuti"]
for col in dateCol: 
  newDf[col] = pd.to_datetime(newDf[col], errors='coerce')

nan_value = float("NaN")
columnsToRemoveNaN = ["dt_interna", "evolucao", "dt_evoluca", "dt_notific", "dt_encerra", "dt_saiduti"]
newDf[columnsToRemoveNaN].replace("", nan_value, inplace=True)
newDf.dropna(subset = columnsToRemoveNaN, inplace=True)
newDf.dropna()
newDf.info()

"""##Criação de colunas adicionais"""

newDf['dias_trat'] = (newDf['dt_evoluca'] - newDf['dt_notific']).dt.days
newDf = newDf.drop(newDf[newDf.dias_trat < 0].index)
newDf = newDf.drop(newDf[(newDf['evolucao'] != 1) & (newDf['evolucao'] != 2)].index)
newDf['evolucao'].value_counts()

"""##Preenchimento com 9 - Não informado"""

newDf = newDf.fillna(9)
newDf.info()

"""##Save"""

newDf.to_csv('Data_set_prognostico_COVID_19_laboratorial_pacientes_hospitalizados.csv', index=False, encoding='utf-8')

df2 = pd.read_csv("Data_set_prognostico_COVID_19_laboratorial_pacientes_hospitalizados.csv", sep=',',header = 0)
df2.info()



"""#Gráficos

##Preparação de ambiente
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import chardet
from datetime import datetime
from google.colab import drive
import seaborn as sns

# drive.mount('/content/drive', True)
# df = pd.read_csv("/content/drive/MyDrive/DataMining/SIVEP/pre-3.csv", sep=',',header = 0)

# %matplotlib inline

"""##Carregamento dos dados

###Drive
"""

drive.mount('/content/drive', True)
graficDf = pd.read_csv("/content/drive/MyDrive/DataMining/SIVEP/pre-3.csv", sep=',',header = 0)

"""###Local"""

graficDf = pd.read_csv("Data_set_prognostico_COVID_19_laboratorial_pacientes_hospitalizados.csv", sep=',',header = 0)
graficDf.info()

"""##Backup"""

#create
graficBackup = graficDf.copy()

#load
graficDf = graficBackup.copy()

"""##Renomeação de campos"""

graficDf['dt_notific'] = pd.to_datetime(graficDf['dt_notific'])
graficDf['year'] = graficDf['dt_notific'].dt.year
graficDf['month'] = graficDf['dt_notific'].dt.month
graficDf.loc[graficDf['evolucao'] == 1, 'evolucao'] = "CURED"
graficDf.loc[graficDf['evolucao'] == 2, 'evolucao'] = "DIED"

graficDf.loc[graficDf['cs_sexo'] == 1, 'cs_sexo'] = "Male"
graficDf.loc[graficDf['cs_sexo'] == 2, 'cs_sexo'] = "Female"
graficDf.loc[graficDf['cs_sexo'] == 9, 'cs_sexo'] = "Undefined"

graficDf.loc[graficDf['cs_gestant'] == 1, 'cs_gestant'] = "1º Trimester"
graficDf.loc[graficDf['cs_gestant'] == 2, 'cs_gestant'] = "2º Trimester"
graficDf.loc[graficDf['cs_gestant'] == 3, 'cs_gestant'] = "3º Trimester"
graficDf.loc[graficDf['cs_gestant'] == 4, 'cs_gestant'] = "Undefined"
graficDf.loc[graficDf['cs_gestant'] == 5, 'cs_gestant'] = "No"
graficDf.loc[graficDf['cs_gestant'] == 6, 'cs_gestant'] = "No applicable"
graficDf.loc[graficDf['cs_gestant'] == 9, 'cs_gestant'] = "Undefined"
graficDf.loc[graficDf['cs_gestant'] == 0, 'cs_gestant'] = "Undefined"

graficDf.loc[graficDf['cs_raca'] == 1, 'cs_raca'] = "White"
graficDf.loc[graficDf['cs_raca'] == 2, 'cs_raca'] = "Black"
graficDf.loc[graficDf['cs_raca'] == 3, 'cs_raca'] = "Yellow"
graficDf.loc[graficDf['cs_raca'] == 4, 'cs_raca'] = "Brown"
graficDf.loc[graficDf['cs_raca'] == 5, 'cs_raca'] = "Indigenous"
graficDf.loc[graficDf['cs_raca'] == 9, 'cs_raca'] = "Ignored"

graficDf.loc[graficDf['nosocomial'] == 1, 'nosocomial'] = "Yes"
graficDf.loc[graficDf['nosocomial'] == 2, 'nosocomial'] = "No"
graficDf.loc[graficDf['nosocomial'] == 9, 'nosocomial'] = "Undefined"

graficDf.loc[graficDf['ave_suino'] == 1, 'ave_suino'] = "Yes"
graficDf.loc[graficDf['ave_suino'] == 2, 'ave_suino'] = "No"
graficDf.loc[graficDf['ave_suino'] == 9, 'ave_suino'] = "Undefined"
graficDf.loc[graficDf['ave_suino'] == 3, 'ave_suino'] = "Undefined"

graficDf.loc[graficDf['febre'] == 1, 'febre'] = "Yes"
graficDf.loc[graficDf['febre'] == 2, 'febre'] = "No"
graficDf.loc[graficDf['febre'] == 9, 'febre'] = "Undefined"

graficDf.loc[graficDf['tosse'] == 1, 'tosse'] = "Yes"
graficDf.loc[graficDf['tosse'] == 2, 'tosse'] = "No"
graficDf.loc[graficDf['tosse'] == 9, 'tosse'] = "Undefined"

graficDf.loc[graficDf['garganta'] == 1, 'garganta'] = "Yes"
graficDf.loc[graficDf['garganta'] == 2, 'garganta'] = "No"
graficDf.loc[graficDf['garganta'] == 9, 'garganta'] = "Undefined"

graficDf.loc[graficDf['dispneia'] == 1, 'dispneia'] = "Yes"
graficDf.loc[graficDf['dispneia'] == 2, 'dispneia'] = "No"
graficDf.loc[graficDf['dispneia'] == 9, 'dispneia'] = "Undefined"

graficDf.loc[graficDf['desc_resp'] == 1, 'desc_resp'] = "Yes"
graficDf.loc[graficDf['desc_resp'] == 2, 'desc_resp'] = "No"
graficDf.loc[graficDf['desc_resp'] == 9, 'desc_resp'] = "Undefined"

graficDf.loc[graficDf['saturacao'] == 1, 'saturacao'] = "Yes"
graficDf.loc[graficDf['saturacao'] == 2, 'saturacao'] = "No"
graficDf.loc[graficDf['saturacao'] == 9, 'saturacao'] = "Undefined"

graficDf.loc[graficDf['diarreia'] == 1, 'diarreia'] = "Yes"
graficDf.loc[graficDf['diarreia'] == 2, 'diarreia'] = "No"
graficDf.loc[graficDf['diarreia'] == 9, 'diarreia'] = "Undefined"

graficDf.loc[graficDf['vomito'] == 1, 'vomito'] = "Yes"
graficDf.loc[graficDf['vomito'] == 2, 'vomito'] = "No"
graficDf.loc[graficDf['vomito'] == 9, 'vomito'] = "Undefined"

graficDf.loc[graficDf['diabetes'] == 1, 'diabetes'] = "Yes"
graficDf.loc[graficDf['diabetes'] == 2, 'diabetes'] = "No"
graficDf.loc[graficDf['diabetes'] == 9, 'diabetes'] = "Undefined"

graficDf.loc[graficDf['vacina'] == 1, 'vacina'] = "Yes"
graficDf.loc[graficDf['vacina'] == 2, 'vacina'] = "No"
graficDf.loc[graficDf['vacina'] == 9, 'vacina'] = "Undefined"

graficDf.loc[graficDf['antiviral'] == 1, 'antiviral'] = "Yes"
graficDf.loc[graficDf['antiviral'] == 2, 'antiviral'] = "No"
graficDf.loc[graficDf['antiviral'] == 9, 'antiviral'] = "Undefined"

graficDf.loc[graficDf['suport_ven'] == 1, 'suport_ven'] = "Yes, invasive"
graficDf.loc[graficDf['suport_ven'] == 2, 'suport_ven'] = "Yes, not invasive"
graficDf.loc[graficDf['suport_ven'] == 3, 'suport_ven'] = "No"
graficDf.loc[graficDf['suport_ven'] == 9, 'suport_ven'] = "Undefined"

graficDf.loc[graficDf['raiox_res'] == 1, 'raiox_res'] = "Normal"
graficDf.loc[graficDf['raiox_res'] == 2, 'raiox_res'] = "Interstitial infiltrate"
graficDf.loc[graficDf['raiox_res'] == 3, 'raiox_res'] = "Consolidated"
graficDf.loc[graficDf['raiox_res'] == 4, 'raiox_res'] = "Mixed"
graficDf.loc[graficDf['raiox_res'] == 5, 'raiox_res'] = "Other"
graficDf.loc[graficDf['raiox_res'] == 6, 'raiox_res'] = "Not realized"
graficDf.loc[graficDf['raiox_res'] == 9, 'raiox_res'] = "Undefined"

graficDf.loc[graficDf['pos_pcrflu'] == 1, 'pos_pcrflu'] = "Yes"
graficDf.loc[graficDf['pos_pcrflu'] == 2, 'pos_pcrflu'] = "No"
graficDf.loc[graficDf['pos_pcrflu'] == 9, 'pos_pcrflu'] = "Undefined"

graficDf.loc[graficDf['pos_pcrout'] == 1, 'pos_pcrout'] = "Yes"
graficDf.loc[graficDf['pos_pcrout'] == 2, 'pos_pcrout'] = "No"
graficDf.loc[graficDf['pos_pcrout'] == 9, 'pos_pcrout'] = "Undefined"

graficDf.loc[graficDf['dor_abd'] == 1, 'dor_abd'] = "Yes"
graficDf.loc[graficDf['dor_abd'] == 2, 'dor_abd'] = "No"
graficDf.loc[graficDf['dor_abd'] == 9, 'dor_abd'] = "Undefined"

graficDf.loc[graficDf['fadiga'] == 1, 'fadiga'] = "Yes"
graficDf.loc[graficDf['fadiga'] == 2, 'fadiga'] = "No"
graficDf.loc[graficDf['fadiga'] == 9, 'fadiga'] = "Undefined"

graficDf.loc[graficDf['perd_olft'] == 1, 'perd_olft'] = "Yes"
graficDf.loc[graficDf['perd_olft'] == 2, 'perd_olft'] = "No"
graficDf.loc[graficDf['perd_olft'] == 9, 'perd_olft'] = "Undefined"

graficDf.loc[graficDf['perd_pala'] == 1, 'perd_pala'] = "Yes"
graficDf.loc[graficDf['perd_pala'] == 2, 'perd_pala'] = "No"
graficDf.loc[graficDf['perd_pala'] == 9, 'perd_pala'] = "Undefined"

graficDf.loc[graficDf['tomo_res'] == 1, 'tomo_res'] = "Typical covid-19"
graficDf.loc[graficDf['tomo_res'] == 2, 'tomo_res'] = "Undetermined covid-19"
graficDf.loc[graficDf['tomo_res'] == 3, 'tomo_res'] = "Atypical covid-19"
graficDf.loc[graficDf['tomo_res'] == 4, 'tomo_res'] = "Negative for Pneumonia"
graficDf.loc[graficDf['tomo_res'] == 5, 'tomo_res'] = "Other"
graficDf.loc[graficDf['tomo_res'] == 6, 'tomo_res'] = "Not done"
graficDf.loc[graficDf['tomo_res'] == 9, 'tomo_res'] = "Undefined"

graficDf.loc[graficDf['cs_escol_n'] == 0, 'cs_escol_n'] = "Uneducated / Illiterate"
graficDf.loc[graficDf['cs_escol_n'] == 1, 'cs_escol_n'] = "Fundamental 1ª-5ª"
graficDf.loc[graficDf['cs_escol_n'] == 2, 'cs_escol_n'] = "Fundamental 6ª-9ª"
graficDf.loc[graficDf['cs_escol_n'] == 3, 'cs_escol_n'] = "High school"
graficDf.loc[graficDf['cs_escol_n'] == 4, 'cs_escol_n'] = "University education"
graficDf.loc[graficDf['cs_escol_n'] == 5, 'cs_escol_n'] = "Not applicable"
graficDf.loc[graficDf['cs_escol_n'] == 9, 'cs_escol_n'] = "Undefined"

"""##Agrupamento"""

dfYEvoGroup = graficDf.groupby(by=["year","evolucao"]).count()['dt_notific']

faixas_etarias = np.arange(0, df['nu_idade_n'].max()+1, 20)
graficDf['Age group'] = pd.cut(df['nu_idade_n'], faixas_etarias)
dfAgeGroup = graficDf.groupby(by=["Age group","evolucao"]).count()['dt_notific']
# dfAgeGroup.head(100)

"""##Distribuição"""

def get_distribution(df, target_col, numeric_columns=[]):
  '''
  Get DataFrame distribution for a given target column.
  
  Parameters
  ----------
  df : pandas.DataFrame
    DataFrame to get distribution from.
  target_col : str
    Target column name.
  numeric_columns : list
    List of numeric columns to get distribution from.
    
  Returns
  -------
  pandas.DataFrame
    DataFrame with distribution for the given target column.
  '''
  total = df.shape[0]
  columns = df.loc[:, df.columns != target_col].columns.to_list()
  dfs_by_target_col_classes = {}
  values_target_col = df[target_col].value_counts().index.to_list()
  
  for value in values_target_col:
    dfs_by_target_col_classes[value] = df[df[target_col] == value]
  
  data = {'Attributes': [], 'Total': []}
  
  for value_target_col in values_target_col:
    data[f'{target_col}:{value_target_col}'] = []
  
 
  for col in columns:
    if (col in numeric_columns):
      mean = df[col].mean()
      std = df[col].std()
      data['Attributes'].append(col)
      data['Total'].append(f'{mean:.1f} ({std:.1f})')
      
      for df_by_target_col_key in dfs_by_target_col_classes.keys():
          mean_by_target_col = dfs_by_target_col_classes[df_by_target_col_key][col].mean()
          std_by_target_col = dfs_by_target_col_classes[df_by_target_col_key][col].std()
          
          data[f'{target_col}:{df_by_target_col_key}'].append(f'{mean_by_target_col:.1f} ({std_by_target_col:.1f})')
    else: 
      value_counts_total = df[col].value_counts()
      value_index = value_counts_total.index.to_list()
      value_index.sort()
      
      for index in value_index:
        data['Attributes'].append(f'{col}:{index}')
        data['Total'].append(f'{value_counts_total[index]}/{total} ({(value_counts_total[index]/total) * 100:.1f})')
        
        for df_by_target_col_key in dfs_by_target_col_classes.keys():
          total_by_target_col_class = dfs_by_target_col_classes[df_by_target_col_key].shape[0]
          value_counts_total_by_target_col = dfs_by_target_col_classes[df_by_target_col_key][col].value_counts()
          
          if index in value_counts_total_by_target_col.index.to_list():
            data[f'{target_col}:{df_by_target_col_key}'].append(f'{value_counts_total_by_target_col[index]}/{total_by_target_col_class} ({(value_counts_total_by_target_col[index]/total_by_target_col_class)  * 100:.1f})')
          else:
            data[f'{target_col}:{df_by_target_col_key}'].append('-')
            
  return pd.DataFrame(data)

dfDist = get_distribution(graficDf, "evolucao", numeric_columns=['nu_idade_n','dias_trat', 'year', 'month', 'sem_pri','sem_not', 'cs_zona'])

"""##Gráficos

Por faixa etária
"""

sns.set(font_scale=0.9)
ax = dfAgeGroup.unstack(level=1).plot(kind='bar', subplots=True, rot=0, figsize=(9, 7))

"""Por ano"""

import matplotlib.pyplot as plt
ax = dfYEvoGroup.unstack(level=1).plot(kind='bar', subplots=True, rot=0, figsize=(9, 7))
plt.tight_layout()

"""Distribuição"""

pd.set_option('display.max_rows', None)

dfDist.head(10000)

graficDf.info()